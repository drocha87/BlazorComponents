@page "/"

@using DrBlazor
@using DrBlazor.TestWasmApp.Components

<PageTitle>Index</PageTitle>

<Popover @bind-Open="_open"
         GetControl="@(() => _ref)"
         Margin="10"
         FlipToFit
         DisableArrow
         Direction="Direction.Bottom">
    <div style="max-width: 280px;">
        <h4>Basic dialog title</h4>
        <p>
            A dialog is a type of modal window that appears in front of app content
            to provide critical information or prompt for a decision to be made.
        </p>
        <DrTooltip>
            <DrTooltipContent>
                A nested tooltip inside the popover
            </DrTooltipContent>
            <ChildContent>
                Hover it to show a tooltip
            </ChildContent>
        </DrTooltip>
    </div>
</Popover>

<div style="margin-top: 4rem;">
    <DrTooltip>
        <DrTooltipContent>
            This is a tooltip very nice!
        </DrTooltipContent>
        <ChildContent>
            Hover it to show a tooltip
        </ChildContent>
    </DrTooltip>
</div>

<div style="display: flex; justify-content: start; margin: 4rem 0;">
    <button @ref="_ref" @onclick="@(() => _open = !_open)">Open Popover</button>
</div>

<div id="destination-one"></div>
<div id="destination-two"></div>

@* value is just and integer with value: 100 *@
<CascadingValue Value="@value">
    <DrTeleport To="@destination">
        <MyComponent>
            @* this component just get the cascading parameter and render it with a message *@
        </MyComponent>
    </DrTeleport>
</CascadingValue>

<button @onclick="@ToggleDestination">
    Changed teleport destination
</button>

<TestDialog> </TestDialog>

@code {
    public int value = 100;
    string destination = "#destination-one";

    public ElementReference _ref;
    bool _open = false;

    public async Task ToggleDestination()
    {
        if (destination.Equals("#destination-one"))
        {
            destination = "#destination-two";
        }
        else
        {
            destination = "#destination-one";
        }
        await InvokeAsync(StateHasChanged);
    }
}

<style>
    .card {
        padding: 1rem;
        background-color: cyan;
    }
</style>