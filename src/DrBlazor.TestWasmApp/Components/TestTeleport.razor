<DrText Typo="@TypoStyle.Display" Size="@TypoSize.Small" GutterBottom>
    Teleport
</DrText>

<DrText Typo="@TypoStyle.Body" Size="@TypoSize.Medium" GutterBottom>
    Teleports a render fragment to a node that exists in the DOM. It alters the rendered
    DOM structure but does not affect the logical hierarchy of the fragment. This means
    that cascading values and events should continue to work as expected.
</DrText>

<DrFlex Gap="2rem" AlignItems="stretch">
    <DrFlexItem Grow="1f" AlignSelf="stretch">
        <DrContainer>
            <DrText Typo="@TypoStyle.Headline" Size="@TypoSize.Small">
                A:
                <DrTeleportSpot Name="containerOne"></DrTeleportSpot>
            </DrText>
        </DrContainer>
    </DrFlexItem>
    <DrFlexItem Grow="1f" AlignSelf="stretch">
        <DrContainer>
            <DrText Typo="@TypoStyle.Headline" Size="@TypoSize.Small">
                B:
                <DrTeleportSpot Name="containerTwo"></DrTeleportSpot>
            </DrText>
        </DrContainer>
    </DrFlexItem>
</DrFlex>

<DrTeleport To="@destination">
    <DrText Typo="@TypoStyle.Body" Size="@TypoSize.Medium">
        <div data-value="@($"{_number}")">
            This will be rendered in some container @_number
        </div>
    </DrText>
</DrTeleport>

<DrButtonText Text="Teleport Content" OnClick="@ToggleDestination" Class="mt-4">
</DrButtonText>

@code {
    string destination = "containerOne";
    int _number = 0;

    public async Task ToggleDestination()
    {
        _number++;
        if (destination.Equals("containerOne"))
        {
            destination = "containerTwo";
        }
        else
        {
            destination = "containerOne";
        }
        await InvokeAsync(StateHasChanged);
    }
}